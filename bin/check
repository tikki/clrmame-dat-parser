#!/usr/bin/env python

from contextlib import contextmanager
from pathlib import Path
from typing import Tuple, Iterable, Generator, Dict, IO
from zipfile import ZipFile, is_zipfile
from zlib import crc32
import sys

from clrmame.structs import Rom, Game
import clrmame


def _usage():
    """Print usage and quit."""
    print(f"""
Usage: {sys.argv[0]} {{datfile}} {{searchdir}}

    datfile    name of the .dat file
    searchdir  path to search for matching roms

The given datfile may be a plain .dat file or a zipped .dat file.
The given searchdir will be searched recursively.
All files inside searchdir will be considered for matches.  For zip files, the
files inside the zip files will be considered for matches.
""")
    sys.exit(1)


Key = Tuple[str, str]


def _key_from_rom(rom: Rom) -> Key:
    return rom.crc, str(rom.size)


def _keys_from_game(game: Game) -> Iterable[Key]:
    yield from (_key_from_rom(rom) for rom in game.roms)


@contextmanager
def _datfile(path: Path) -> Generator[IO[bytes], None, None]:
    fileobj = zipfile = None
    if path.suffix != '.zip' or not is_zipfile(path):
        fileobj = path.open()
    else:
        zipfile = ZipFile(path, 'r')
        try:
            names = zipfile.namelist()
            if len(names) != 1 or not names[0].endswith('.dat'):
                raise RuntimeError(f'No dat file found in zip file: {path}')
            fileobj = zipfile.open(names[0])
        except Exception:
            zipfile.close()
            raise
    try:
        yield fileobj
    finally:
        if zipfile is not None:
            zipfile.close()
        fileobj.close()


def _games(datfile: Path) -> Iterable[Game]:
    with _datfile(datfile) as dat:
        yield from (struct for struct in
                    clrmame.xml.parse(dat) if isinstance(struct, Game))


class RomDb:

    def __init__(self, datfile: Path) -> None:
        self._db: Dict[Key, Game] = {}
        self.load(datfile)

    def load(self, datfile: Path):
        for game in _games(datfile):
            for key in _keys_from_game(game):
                if key in self._db:
                    raise RuntimeError('omg we have a collision!')
                self._db[key] = game

    def game_with_key(self, key: Key) -> Game:
        return self._db[key]

    def rom_with_key(self, key: Key) -> Rom:
        game = self.game_with_key(key)
        for rom in game.roms:
            if key == _key_from_rom(rom):
                return rom
        raise RuntimeError(':[')

    def games(self) -> Iterable[Game]:
        return self._db.values()

    def roms(self) -> Iterable[Rom]:
        return (rom for game in self.games() for rom in game.roms)

    def __contains__(self, key: Key) -> bool:
        return key in self._db

    def __len__(self) -> int:
        return len(self._db)


def _h(crc: int) -> str:
    return f'{crc:X}'


def _keys_from_file(file: Path) -> Iterable[Tuple[Path, Key]]:
    if is_zipfile(file):
        with ZipFile(file, 'r') as z:
            for info in z.infolist():
                if info.is_dir():
                    continue
                key = _h(info.CRC), str(info.file_size)
                yield Path(f'{file}:/{info.filename}'), key
    else:
        key = _h(crc32(file.read_bytes())), str(file.stat().st_size)
        yield file, key


def main(args):
    if len(args) != 2:
        _usage()
    datfile = Path(args[0])
    searchdir = Path(args[1])
    targetdir = searchdir
    db = RomDb(datfile)
    print(f'info: loaded details for {len(db)} roms')
    found = set()
    for checkfile in (i for i in searchdir.glob('**/*') if i.is_file()):
        for keyfile, key in _keys_from_file(checkfile):
            is_archive = keyfile is not checkfile
            if key not in db:
                print(f'unknown: {keyfile}')
                continue
            rom = db.rom_with_key(key)
            game = db.game_with_key(key)
            keyreport = f'{keyfile}: {game.name}: {rom.name}'
            found.add(rom)
            print('found:', keyreport)
            targetcontainer = (f'{game.name}{checkfile.suffix}:/'
                               if is_archive else game.name)
            targetpath = targetdir / targetcontainer / rom.name
            if keyfile.resolve() != targetpath.resolve():
                print('rename:', keyreport)
    missing = set(db.roms()) - found
    for game in missing:
        print(f'missing: {game.name}')
    print(f'info: missing {len(missing)} of {len(db)} roms')


if __name__ == '__main__':
    main(sys.argv[1:])
